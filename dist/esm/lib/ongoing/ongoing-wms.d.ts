/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/api/v1/articleItems/statuses": {
        /** Get all article item statuses. */
        get: operations["ArticleItems_GetOrderClasses"];
    };
    "/api/v1/articleItems": {
        /** Get all article items which match the specified search criteria. */
        get: operations["ArticleItems_GetArticleItems"];
    };
    "/api/v1/articles/{articleSystemId}": {
        /** Get an article. */
        get: operations["Articles_Get"];
        /** Update an existing article. Note that the articleSystemId refers to Ongoing WMS' internal ID for the article. */
        put: operations["Articles_Put"];
    };
    "/api/v1/articles/{articleSystemId}/files": {
        /** Get all files which are attached to a specific article. */
        get: operations["Articles_GetFiles"];
        /** Create or update a file which is attached to an article. The filename will be used to check if the file already exists. */
        put: operations["Articles_PutFileUsingFilename"];
        /** Create a new file and attach it to the specified article. */
        post: operations["Articles_Post"];
    };
    "/api/v1/articles/{articleSystemId}/files/{fileId}": {
        /** Update a file which is attached to an article. */
        put: operations["Articles_Put2"];
    };
    "/api/v1/articles": {
        /** Get all articles which match the specified search criteria. */
        get: operations["Articles_GetAll"];
        /** Create or update an article. If no article with the specified article number exists, it will be created. Otherwise, it will be updated. */
        put: operations["Articles_Put3"];
    };
    "/api/v1/articles/historicalInventory": {
        /** Get the historical stock balances for all articles at a specific time in the past. */
        get: operations["Articles_GetHistoricalInventory"];
    };
    "/api/v1/articles/inventoryPerWarehouse": {
        /** Get inventory info (specified per warehouse) for the articles which match the filter. */
        get: operations["Articles_GetInventoryPerWarehouse"];
    };
    "/api/v1/articles/{articleSystemId}/dangerousGoods": {
        /** Get dangerous goods info for an article. */
        get: operations["Articles_GetDangerousGoods"];
        /** Update the dangerous goods info of an article. Note that the UN number must exist in Ongoing WMS before any articles can be set to that UN number. */
        put: operations["Articles_PutDangerousGoods"];
    };
    "/api/v1/articles/dangerousGoods": {
        /** Get dangerous goods info for articles, using article numbers. */
        get: operations["Articles_GetDangerousGoodsByArticleNumber"];
        /** Update the dangerous goods info of an article via the article number. */
        put: operations["Articles_PutDangerousGoodsByArticleNumber"];
    };
    "/api/v1/articles/{articleSystemId}/structureDefinition": {
        /** Get all structure rows for structure articles and production articles. */
        get: operations["Articles_GetStructureRows"];
    };
    "/api/v1/articles/structureDefinitions": {
        /** Get all structure rows for structure articles and production articles, by using article numbers. */
        get: operations["Articles_GetStructureRowsByArticleNumber"];
    };
    "/api/v1/articles/classes": {
        /** Get all article classes. */
        get: operations["Articles_GetArticleClasses"];
        /** Create or update an article class. If there is no article class with the specified code, it will be created. Otherwise, the existing article class will be updated. */
        put: operations["Articles_PutArticleClass"];
    };
    "/api/v1/articles/classes/{articleClassId}": {
        /** Update an article class. The ID will be used to identify the article class. */
        put: operations["Articles_PutArticleClassUsingId"];
        /** Delete an article class. This will affect any articles which have previously been assigned to the class. */
        delete: operations["Articles_DeleteArticleClass"];
    };
    "/api/v1/articles/{articleSystemId}/classes": {
        /** Set the classes on an article. */
        put: operations["Articles_SetArticleClasses"];
    };
    "/api/v1/inventoryAdjustments/{inventoryId}": {
        /** Get a specific inventory adjustment. */
        get: operations["InventoryAdjustments_Get"];
    };
    "/api/v1/inventoryAdjustments": {
        /** Get all inventory adjustments which match the specified search criteria. */
        get: operations["InventoryAdjustments_GetAll"];
    };
    "/api/v1/inventoryAdjustments/{inventoryId}/articles/{articleSystemId}/setReported": {
        /** Sets the 'reported' flag on an inventory to true for the specified article. */
        patch: operations["InventoryAdjustments_PatchInventoryAdjustmentArticlesReported"];
    };
    "/api/v1/orders/{orderId}/parcels/{parcelId}": {
        /** Update a parcel on an order. */
        put: operations["Orders_PutParcelUsingId"];
        /** Deletes a parcel. A parcel can only be deleted if it is empty. */
        delete: operations["Orders_DeleteParcel"];
    };
    "/api/v1/orders/{orderId}/parcels": {
        /** Create or update a parcel on an order. */
        put: operations["Orders_PutParcel"];
    };
    "/api/v1/orders/{orderId}/orderTracking": {
        /** Create or update a waybill on an order. */
        put: operations["Orders_PutOrderTracking"];
    };
    "/api/v1/orders/wayOfDeliveryTypes": {
        /** Get all order way of delivery types. */
        get: operations["Orders_GetWayOfDeliveryTypes"];
        /** Create or update a way of delivery type. If there is no way of delivery type with the specified code, it will be created. Otherwise, the existing way of delivery type will be updated. */
        put: operations["Orders_PutWayOfDeliveryType"];
    };
    "/api/v1/orders/wayOfDeliveryTypes/{wayOfDeliveryTypeId}": {
        /** Update a way of delivery type. The ID will be used to identify the way of delivery type. */
        put: operations["Orders_PutWayOfDeliveryTypeUsingId"];
        /** Delete a way of delivery type. */
        delete: operations["Orders_DeleteWayOfDeliveryType"];
    };
    "/api/v1/orders/classes": {
        /** Get all order classes. */
        get: operations["Orders_GetOrderClasses"];
    };
    "/api/v1/orders/statuses": {
        /** Get all order statuses. */
        get: operations["Orders_GetOrderStatuses"];
    };
    "/api/v1/orders/types": {
        /** Get all order types for a particular goods owner. */
        get: operations["Orders_GetOrderTypes"];
    };
    "/api/v1/orders/{orderId}": {
        /** Get an order. */
        get: operations["Orders_Get"];
        /** Update an order. Note that you are not allowed to update an order after the warehouse has started working on it. */
        put: operations["Orders_PutOrderUsingOrderId"];
        /** Cancel an order. You can only cancel an order if the warehouse has not started working on it. */
        delete: operations["Orders_Delete"];
    };
    "/api/v1/orders": {
        /** Get all orders which match the specified search criteria. */
        get: operations["Orders_GetAll"];
        /** Create or update an order. If there is no order with the specified order number, it will be created. Otherwise, the existing order will be updated. Note that you are not allowed to update an order after the warehouse has started working on it. */
        put: operations["Orders_PutOrder"];
        /** Cancel an order using the order number. You can only cancel an order if the warehouse has not started working on it. */
        delete: operations["Orders_DeleteByOrderNumber"];
    };
    "/api/v1/orders/{orderId}/wayBillRows": {
        /** Get all waybill rows for an order. */
        get: operations["Orders_GetWayBillRows"];
        /** Create a waybill row. */
        post: operations["Orders_PostWayBillRow"];
    };
    "/api/v1/orders/{orderId}/wayBillRows/{wayBillRowId}": {
        /** Deletes a waybill row. */
        delete: operations["Orders_DeleteWaybillRow"];
        /** Update waybill row. */
        patch: operations["Orders_PatchWayBillRow"];
    };
    "/api/v1/orders/{orderId}/invoiceCharges": {
        /** Get all invoice charges for an order. This function requires an additional permission for the API user, see Administration->Integration->API for goods owners. */
        get: operations["Orders_GetInvoiceCharges"];
    };
    "/api/v1/orders/{orderId}/files": {
        /** Get all files which are attached to a specific order. */
        get: operations["Orders_GetFiles"];
        /** Create or update a file which is attached to an order. The filename will be used to check if the file already exists. */
        put: operations["Orders_PutFileUsingFilename"];
        /** Create a new file and attach it to an order. */
        post: operations["Orders_Post"];
    };
    "/api/v1/orders/{orderId}/files/{fileId}": {
        /** Update a file which is attached to an order. */
        put: operations["Orders_PutFile"];
    };
    "/api/v1/orders/{orderId}/orderNumber": {
        /** Update the order number of an existing order. Note that the system will not verify that the order number is unique. */
        patch: operations["Orders_PatchOrderNumber"];
    };
    "/api/v1/orders/{orderId}/setOrderClasses": {
        /** Set order classes on an existing order. If the order has any other classes which you don't send, they will be deleted from the order. */
        patch: operations["Orders_PatchSetOrderClasses"];
    };
    "/api/v1/orders/{orderId}/addOrderClasses": {
        /** Add order classes to an existing order. */
        patch: operations["Orders_PatchAddOrderClasses"];
    };
    "/api/v1/orders/{orderId}/transporter": {
        /** Update the transporter of an existing order. */
        patch: operations["Orders_PatchOrderTransporterCode"];
    };
    "/api/v1/orders/{orderId}/returnWaybill": {
        /** Update the return waybill of an existing order. */
        patch: operations["Orders_PatchReturnWaybill"];
    };
    "/api/v1/orders/{orderId}/servicePointCode": {
        /** Update the service point code of an existing order. */
        patch: operations["Orders_PatchServicePointCode"];
    };
    "/api/v1/orders/{orderId}/orderStatus": {
        /** Update the status of an order. Note that if the warehouse has allocated goods to the order, then it's possible that this call will fail. */
        patch: operations["Orders_PatchOrderStatus"];
    };
    "/api/v1/orders/{orderId}/waybill": {
        /** Update the waybill of an existing order. */
        patch: operations["Orders_PatchWaybill"];
    };
    "/api/v1/orders/{orderId}/deliveryDate": {
        /** Update the delivery date of an existing order. */
        patch: operations["Orders_PatchDeliveryDate"];
    };
    "/api/v1/orders/{orderId}/setReportedNumberOfItemsToPickedNumberOfItems": {
        /** Sets the reported number of items on each order line to the picked number of items. */
        patch: operations["Orders_PatchSetReportedNumberOfItemsToPickedNumberOfItems"];
    };
    "/api/v1/orders/{orderId}/lines/{orderLineId}/reportedNumberOfItems": {
        /** Update the reported number of items on a particular order line. */
        patch: operations["Orders_PatchReportedNumberOfItems"];
    };
    "/api/v1/orders/{orderId}/setReportedReturnedNumberOfItemsToReturnedNumberOfItems": {
        /** Sets the reported returned number of items on each order line to the returned number of items. */
        patch: operations["Orders_PatchSetReportedReturnedNumberOfItemsToReturnedNumberOfItems"];
    };
    "/api/v1/orders/{orderId}/lines/{orderLineId}/reportedReturnedNumberOfItems": {
        /** Update the reported returned number of items on a particular order line. */
        patch: operations["Orders_PatchReportedReturnedNumberOfItems"];
    };
    "/api/v1/returnOrders/returnCauses": {
        /** Get all return causes. */
        get: operations["ReturnOrders_GetReturnCauses"];
        /** Create or update a return cause type. If there is no return cause with the specified code, it will be created. Otherwise, the existing return cause will be updated. */
        put: operations["ReturnOrders_PutReturnCause"];
    };
    "/api/v1/returnOrders/returnCauses/{returnCauseId}": {
        /** Update a return cause. The ID will be used to identify the return cause. */
        put: operations["ReturnOrders_PutReturnCauseUsingId"];
    };
    "/api/v1/returnOrders/{returnOrderId}": {
        /** Get a return order using the return order ID. */
        get: operations["ReturnOrders_GetByReturnOrderId"];
    };
    "/api/v1/returnOrders": {
        /** Get a list of return orders which match the specified search criteria. */
        get: operations["ReturnOrders_Get"];
        /** Create or update a return order. */
        put: operations["ReturnOrders_PutReturnOrder"];
    };
    "/api/v1/returnOrders/statuses": {
        /** Get all return order statuses. */
        get: operations["ReturnOrders_GetOrderStatuses"];
    };
    "/api/v1/purchaseOrders/statuses": {
        /** Get all purchase order statuses. */
        get: operations["PurchaseOrders_GetPurchaseOrderStatuses"];
    };
    "/api/v1/purchaseOrders/types": {
        /** Get all purchase order types for a particular goods owner. */
        get: operations["PurchaseOrders_GetPurchaseOrderTypes"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}": {
        /** Get a purchase order. */
        get: operations["PurchaseOrders_Get"];
        /** Update a purchase order. */
        put: operations["PurchaseOrders_Put"];
        /** Cancel a purchase order. */
        delete: operations["PurchaseOrders_Delete"];
    };
    "/api/v1/purchaseOrders": {
        /** Get all purchase orders which match the specified search criteria. */
        get: operations["PurchaseOrders_GetAll"];
        /** Create or update a purchase order. If no purchase order with the specified purchase order number exists, a new purchase order will be created. Otherwise the existing purchase order will be updated. */
        put: operations["PurchaseOrders_Put2"];
        /** Cancel a purchase order using the purchase order number. */
        delete: operations["PurchaseOrders_DeleteByOrderNumber"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/setReportedNumberOfItemsToReceivedNumberOfItems": {
        /** Sets the reported number of items on each purchase order line to the received number of items. */
        patch: operations["PurchaseOrders_PatchSetReportedNumberOfItemsToReceivedNumberOfItems"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/lines/{purchaseOrderLineId}/reportedNumberOfItems": {
        /** Update the reported number of items on a particular purchase order line. */
        patch: operations["PurchaseOrders_PatchReportedNumberOfItems"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/freeBool1": {
        /** Update FreeBool1 on purchase order. */
        patch: operations["PurchaseOrders_PatchFreeBool1"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/inDate": {
        /** Update the indate on purchase order. */
        patch: operations["PurchaseOrders_PatchInDate"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/advisedDate": {
        /** Update the advisedDate on purchase order. */
        patch: operations["PurchaseOrders_PatchAdvisedDate"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/purchaseOrderStatus": {
        /** Update the status of a purchase order. Note that if the warehouse has started to recieve goods from the purchase order, then it's possible that this call will fail. */
        patch: operations["PurchaseOrders_PatchStatus"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/articleItems": {
        /** Add article items to a purchase order. */
        put: operations["PurchaseOrders_PutArticleItems"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/files": {
        /** Get all files which are attached to a specific purchase order. */
        get: operations["PurchaseOrders_GetFiles"];
        /** Create or update a file which is attached to a purchase order. The filename will be used to check if the file already exists. */
        put: operations["PurchaseOrders_PutFileUsingFilename"];
        /** Create a new file and attach it to a purchase order. */
        post: operations["PurchaseOrders_PostPurchaseOrderFile"];
    };
    "/api/v1/purchaseOrders/{purchaseOrderId}/files/{fileId}": {
        /** Update a file which is attached to a purchase order. */
        put: operations["PurchaseOrders_PutFile"];
    };
    "/api/v1/transporterContracts": {
        /** Get all transporter contracts for a specific goods owner. The response will include all transporter codes which are available for the goods owner. */
        get: operations["TransporterContracts_Get"];
    };
    "/api/v1/parcelTypes": {
        /** Get all parcel types which are valid for a particular goods owner. */
        get: operations["ParcelTypes_GetParcelTypes"];
    };
    "/api/v1/warehouses": {
        /** Get all warehouses which have been set up in the system. */
        get: operations["Warehouses_Get"];
    };
    "/api/v1/warehouses/{warehouseId}/zones": {
        /** Get all zones (including aisles and locations) for a particular warehouse. */
        get: operations["Warehouses_GetZonesForWarehouse"];
    };
    "/api/v1/warehouses/locations/types": {
        /** Get all location types. */
        get: operations["Warehouses_GetLocationTypes"];
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ArticleItemStatusModel: {
            articleItemStatuses?: (components["schemas"]["GetArticleItemStatusModel"])[] | null;
        };
        GetArticleItemStatusModel: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
            isLocked?: boolean;
            isLockedForSale?: boolean;
        };
        GetArticleItemsModel: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            items?: (components["schemas"]["GetArticleItemInfo"])[] | null;
        };
        GetArticleItemInfo: {
            batch?: string | null;
            container?: string | null;
            /** Format: date-time */
            expiryDate?: string | null;
            isLocked?: boolean;
            isLockedForSale?: boolean;
            location?: string | null;
            /** Format: decimal */
            numberOfItems?: number;
            serial?: string | null;
            status?: components["schemas"]["CodeNamePair"];
            comment?: string | null;
            warehouse?: components["schemas"]["GetArticleItemWarehouse"];
            /** Format: date-time */
            inDate?: string;
        };
        CodeNamePair: {
            code?: string | null;
            name?: string | null;
        };
        GetArticleItemWarehouse: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        GetArticleModel: {
            /** @description Goods owner. */
            goodsOwner?: components["schemas"]["GetArticleGoodsOwner"];
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
            productCode?: string | null;
            unitCode?: string | null;
            description?: string | null;
            isStockArticle?: boolean | null;
            isActive?: boolean | null;
            supplierInfo?: components["schemas"]["GetArticleSupplierInfo"];
            barCodeInfo?: components["schemas"]["GetArticleBarCodeInfo"];
            /** Format: int32 */
            quantityPerPackage?: number | null;
            /** Format: int32 */
            quantityPerPallet?: number | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: decimal */
            volume?: number | null;
            /** Format: decimal */
            purchasePrice?: number | null;
            /** Format: decimal */
            stockValuationPrice?: number | null;
            /** Format: decimal */
            customerPrice?: number | null;
            purcaseCurrencyCode?: string | null;
            countryOfOriginCode?: string | null;
            statisticsNumber?: string | null;
            articleGroup?: components["schemas"]["CodeNamePair"];
            articleCategory?: components["schemas"]["CodeNamePair"];
            inventoryInfo?: components["schemas"]["GetArticleInventoryInfo"];
            /** Format: date-time */
            articleDataLastUpdated?: string | null;
            articleKind?: string | null;
            /** Format: int32 */
            stockLimit?: number | null;
            /** Format: decimal */
            minimumReorderQuantity?: number | null;
            /** Format: decimal */
            netWeight?: number | null;
            freeValues?: components["schemas"]["GetArticleFreeValues"];
            /** Format: decimal */
            subQuantityPerItem?: number | null;
            classes?: (components["schemas"]["GetArticleClass"])[] | null;
            customsDescription?: string | null;
            taricNumbersInfo?: components["schemas"]["GetArticleTaricNumbersInfo"];
            /** Format: decimal */
            defaultLocationMaxNumberOfItems?: number | null;
            /** Format: decimal */
            defaultLocationStockLimit?: number | null;
            linkToPicture?: string | null;
            storageProperties?: components["schemas"]["GetArticleStorageProperties"];
            defaultLocation?: components["schemas"]["GetArticleDefaultLocation"];
        };
        GetArticleGoodsOwner: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        GetArticleSupplierInfo: {
            supplierArticleNumber?: string | null;
            supplierNumber?: string | null;
            supplierName?: string | null;
            alternativeSuppliers?: (components["schemas"]["GetArticleAlternativeSupplier"])[] | null;
        };
        GetArticleAlternativeSupplier: {
            supplierArticleNumber?: string | null;
            supplierNumber?: string | null;
            supplierName?: string | null;
        };
        GetArticleBarCodeInfo: {
            barCode?: string | null;
            barCodePackage?: string | null;
            barCodePallet?: string | null;
            alternativeBarCodes?: (components["schemas"]["GetArticleAlternativeBarCode"])[] | null;
        };
        GetArticleAlternativeBarCode: {
            barCode?: string | null;
            /** Format: decimal */
            quantityPerBarCode?: number | null;
            barCodeType?: components["schemas"]["CodeNamePair"];
        };
        GetArticleInventoryInfo: {
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: decimal */
            numberOfBookedItems?: number;
            /** Format: decimal */
            numberOfLockedItems?: number;
            /** Format: decimal */
            toReceiveNumberOfItems?: number;
            /** Format: decimal */
            allocatedNumberOfItems?: number;
            /** Format: decimal */
            lockedForSaleNumberOfItems?: number;
            /** Format: decimal */
            pickedToBeCollectedNumberOfItems?: number;
            /** Format: decimal */
            receivedToBeFinishedNumberOfItems?: number;
            /** Format: date-time */
            lastInDate?: string | null;
            /** Format: decimal */
            sellableNumberOfItems?: number;
            /** Format: decimal */
            totalStockValue?: number;
        };
        GetArticleFreeValues: {
            /** Format: decimal */
            freeDecimal1?: number | null;
            /** Format: decimal */
            freeDecimal2?: number | null;
            /** Format: decimal */
            freeDecimal3?: number | null;
            freeBoolean1?: boolean;
            freeBoolean2?: boolean;
            freeBoolean3?: boolean;
        };
        GetArticleClass: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        GetArticleTaricNumbersInfo: {
            taricNumbers?: (components["schemas"]["GetArticleTaricNumber"])[] | null;
        };
        GetArticleTaricNumber: {
            countryCode?: string | null;
            taricNumber?: string | null;
        };
        GetArticleStorageProperties: {
            isObsolete?: boolean;
        };
        GetArticleDefaultLocation: {
            name?: string | null;
        };
        GetFileModel: {
            /** Format: int32 */
            fileId?: number;
            /** Format: int32 */
            orderId?: number | null;
            /** Format: int32 */
            articleSystemId?: number | null;
            fileName?: string | null;
            mimeType?: string | null;
            fileDataBase64?: string | null;
            /** Format: int32 */
            purchaseOrderId?: number | null;
        };
        PostFileResponse: {
            /** Format: int32 */
            fileId?: number | null;
            success?: boolean;
            message?: string | null;
        };
        PostFileModel: {
            fileName: string;
            mimeType: string;
            fileDataBase64: string;
            advanced?: components["schemas"]["PostFileAdvanced"];
        };
        PostFileAdvanced: {
            printingInfo?: components["schemas"]["PostFilePrintingInfo"];
        };
        PostFilePrintingInfo: {
            /** Format: int32 */
            reportId?: number | null;
            printAsUser?: components["schemas"]["PostFilePrintAsUser"];
            printAsWorkstation?: components["schemas"]["PostFilePrintAsWorkstation"];
        };
        PostFilePrintAsUser: {
            /** Format: int32 */
            userId?: number | null;
        };
        PostFilePrintAsWorkstation: {
            /** Format: int32 */
            workstationId?: number | null;
        };
        PostFileNoFilenameModel: {
            mimeType: string;
            fileDataBase64: string;
        };
        GetHistoricalInventoryModel: {
            articles?: (components["schemas"]["GetHistoricalInventoryArticleModel"])[] | null;
        };
        GetHistoricalInventoryArticleModel: {
            articleItems?: (components["schemas"]["GetHistoricalInventoryArticleItemModel"])[] | null;
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
            productCode?: string | null;
            /** Format: decimal */
            numberOfItems?: number;
        };
        GetHistoricalInventoryArticleItemModel: {
            /** Format: decimal */
            numberOfItems?: number;
            batch?: string | null;
            serial?: string | null;
        };
        GetArticleInventoryPerWarehouseModel: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            inventoryPerWarehouse?: (components["schemas"]["GetArticleInventoryPerWarehouseInfo"])[] | null;
        };
        GetArticleInventoryPerWarehouseInfo: {
            /** Format: int32 */
            warehouseId?: number;
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: decimal */
            numberOfLockedItems?: number;
            /** Format: decimal */
            sellableNumberOfItems?: number;
            /** Format: decimal */
            availableForSaleNumberOfItems?: number;
            reported?: components["schemas"]["GetArticleInventoryPerWarehouseReportedInfo"];
        };
        GetArticleInventoryPerWarehouseReportedInfo: {
            /** Format: decimal */
            pickedToBeReportedNumberOfItems?: number;
            /** Format: decimal */
            returnedToBeReportedNumberOfItems?: number;
            /** Format: decimal */
            receivedToBeReportedNumberOfItems?: number;
        };
        PostDangerousGoodsRepsonse: {
            /** Format: int32 */
            articleSystemId?: number | null;
            message?: string | null;
        };
        PostArticleDangerousGoodsModel: {
            unNumber: string;
            unPackageType?: string | null;
            unLabelNumbers?: string | null;
            unIsMarineHazard?: boolean;
            /** Format: decimal */
            dangerousGoodsCoefficient?: number | null;
            emsCode?: string | null;
            unProperShippingNames?: (components["schemas"]["PostArticleProperShippingNameModel"])[] | null;
        };
        PostArticleProperShippingNameModel: {
            languageCode?: string | null;
            name?: string | null;
        };
        PostArticleDangerousGoodsByArticleNumberModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            articleNumber: string;
            dangerousGoods: components["schemas"]["PostArticleDangerousGoodsModel"];
        };
        GetArticleDangerousGoodsModel: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            dangerousGoods?: components["schemas"]["GetArticleDangerousGoodsInfoModel"];
        };
        GetArticleDangerousGoodsInfoModel: {
            unNumber?: components["schemas"]["GetArticleUnNumberModel"];
            unPackageType?: string | null;
            unLabelNumbers?: string | null;
            unIsMarineHazard?: boolean;
            /** Format: decimal */
            dangerousGoodsCoefficient?: number | null;
            emsCode?: string | null;
            unProperShippingNames?: (components["schemas"]["GetArticleProperShippingNameModel"])[] | null;
        };
        GetArticleUnNumberModel: {
            unNumber?: string | null;
            unTunnelCodes?: (components["schemas"]["GetArticleTunnelCodesModel"])[] | null;
            unClassNumber?: string | null;
        };
        GetArticleTunnelCodesModel: {
            unTunnelCode?: string | null;
        };
        GetArticleProperShippingNameModel: {
            languageCode?: string | null;
            name?: string | null;
        };
        PostArticleResponse: {
            /** Format: int32 */
            articleSystemId?: number | null;
            message?: string | null;
        };
        PostArticleModel: {
            articleGroup?: components["schemas"]["CodeNamePair"];
            articleCategory?: components["schemas"]["CodeNamePair"];
            articleColor?: components["schemas"]["CodeNamePair"];
            articleSize?: components["schemas"]["CodeNamePair"];
            /** Format: int32 */
            goodsOwnerId: number;
            articleNumber: string;
            articleName?: string | null;
            productCode?: string | null;
            unitCode?: string | null;
            description?: string | null;
            isStockArticle?: boolean | null;
            isActive?: boolean | null;
            supplierInfo?: components["schemas"]["PostArticleSupplierInfo"];
            barCodeInfo?: components["schemas"]["PostArticleBarCodeInfo"];
            /** Format: int32 */
            quantityPerPackage?: number | null;
            /** Format: int32 */
            quantityPerPallet?: number | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: decimal */
            volume?: number | null;
            /** Format: decimal */
            purchasePrice?: number | null;
            /** Format: decimal */
            stockValuationPrice?: number | null;
            /** Format: decimal */
            customerPrice?: number | null;
            purcaseCurrencyCode?: string | null;
            countryOfOriginCode?: string | null;
            statisticsNumber?: string | null;
            articleNameTranslations?: (components["schemas"]["PostArticleNameTranslation"])[] | null;
            /** Format: int32 */
            stockLimit?: number | null;
            /** Format: decimal */
            minimumReorderQuantity?: number | null;
            /** Format: decimal */
            netWeight?: number | null;
            linkToPicture?: string | null;
            structureDefinition?: components["schemas"]["PostArticleStructureSpecification"];
            /** Format: int32 */
            quantityPerLayerOnPallet?: number | null;
            /** Format: decimal */
            subQuantityPerItem?: number | null;
            /** Format: int32 */
            minDaysToExpiryDateAllowedOnDelivery?: number | null;
            storageProperties?: components["schemas"]["PostArticleStorageProperties"];
            freeValues?: components["schemas"]["PostArticleFreeValues"];
            storageClass?: components["schemas"]["PostArticleStorageClass"];
            customsDescription?: string | null;
            taricNumbersInfo?: components["schemas"]["PostArticleTaricNumbersInfo"];
        };
        PostArticleSupplierInfo: {
            supplierArticleNumber?: string | null;
            supplierNumber?: string | null;
            supplierName?: string | null;
        };
        PostArticleBarCodeInfo: {
            barCode?: string | null;
            barCodePackage?: string | null;
            barCodePallet?: string | null;
            alternativeBarCodes?: (components["schemas"]["PostArticleAlternativeBarCode"])[] | null;
        };
        PostArticleAlternativeBarCode: {
            barCode?: string | null;
            /** Format: decimal */
            quantityPerBarCode?: number | null;
            barCodeType?: components["schemas"]["CodeNamePair"];
        };
        PostArticleNameTranslation: {
            languageCode?: string | null;
            articleName?: string | null;
        };
        PostArticleStructureSpecification: {
            articleKind?: components["schemas"]["PostArticleStructureKind"];
            rows?: (components["schemas"]["PostArticleStructureRow"])[] | null;
        };
        /** @enum {string} */
        PostArticleStructureKind: "Structure" | "Production";
        PostArticleStructureRow: {
            articleNumber: string;
            /** Format: decimal */
            numberOfItems?: number;
        };
        PostArticleStorageProperties: {
            isObsolete?: boolean | null;
            isSerialNumberArticle?: boolean | null;
            isBatchArticle?: boolean | null;
            isExpiryDateArticle?: boolean | null;
        };
        PostArticleFreeValues: {
            /** Format: decimal */
            freeDecimal1?: number | null;
            /** Format: decimal */
            freeDecimal2?: number | null;
            /** Format: decimal */
            freeDecimal3?: number | null;
            freeBoolean1?: boolean | null;
            freeBoolean2?: boolean | null;
            freeBoolean3?: boolean | null;
        };
        PostArticleStorageClass: {
            name: string;
        };
        PostArticleTaricNumbersInfo: {
            taricNumbers?: (components["schemas"]["PostArticleTaricNumber"])[] | null;
        };
        PostArticleTaricNumber: {
            countryCode: string;
            taricNumber: string;
        };
        GetArticleStructureDefinitionModel: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleKind?: string | null;
            rows?: (components["schemas"]["GetArticleStructureRowInfoModel"])[] | null;
        };
        GetArticleStructureRowInfoModel: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            /** Format: decimal */
            numberOfItems?: number | null;
        };
        GetArticleClassesModel: {
            articleClasses?: (components["schemas"]["GetArticleClassModel"])[] | null;
        };
        GetArticleClassModel: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
            comment?: string | null;
        };
        PostArticleClassResponse: {
            /** Format: int32 */
            articleClassId?: number | null;
            success?: boolean;
            message?: string | null;
        };
        PostArticleClassModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            code: string;
            name: string;
            comment?: string | null;
        };
        PortArticleArticleClassesModel: {
            articleClassIds: (number)[];
        };
        GetInventoryAdjustmentsLine: {
            article?: components["schemas"]["GetInventoryAdjustmentArticle"];
            inventoryAdjustments?: (components["schemas"]["GetInventoryAdjustment"])[] | null;
        };
        GetInventoryAdjustmentArticle: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
            productCode?: string | null;
        };
        GetInventoryAdjustment: {
            /** Format: int32 */
            inventoryId?: number;
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: date-time */
            inventoryTime?: string;
            articleItemComment?: string | null;
            inventoryItemComment?: string | null;
            inventoryAdjustmentCause?: components["schemas"]["CodeNamePair"];
            location?: string | null;
            batchNumber?: string | null;
            serial?: string | null;
            articleItemStatus?: components["schemas"]["CodeNamePair"];
            /** Format: date-time */
            expiryDate?: string | null;
            warehouse?: components["schemas"]["GetInventoryAdjustmentWarehouse"];
        };
        GetInventoryAdjustmentWarehouse: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        PatchInventoryAdjustmentArticlesReportedResponse: {
            message?: string | null;
            items?: (components["schemas"]["PatchInventoryAdjustmentArticlesReportedItems"])[] | null;
        };
        PatchInventoryAdjustmentArticlesReportedItems: {
            /** Format: int32 */
            inventoryArticleItemId?: number;
            /** Format: int32 */
            articleItemId?: number;
        };
        PostParcelResponse: {
            /** Format: int32 */
            parcelId?: number;
            success?: boolean;
            message?: string | null;
        };
        PostParcelTypeModel: {
            parcelNumber: string;
            transportAdministrationType: string;
            advanced?: components["schemas"]["PostParcelAdvanced"];
        };
        PostParcelAdvanced: {
            parcelType?: components["schemas"]["PostParcelParcelType"];
            parcelStatus?: components["schemas"]["PostParcelParcelStatus"];
        };
        PostParcelParcelType: {
            /** Format: int32 */
            id?: number | null;
            code?: string | null;
        };
        PostParcelParcelStatus: {
            /** Format: int32 */
            id?: number | null;
            code?: string | null;
        };
        PostParcelUsingIdTypeModel: {
            parcelNumber?: string | null;
            transportAdministrationType?: string | null;
            advanced?: components["schemas"]["PostParcelAdvanced"];
        };
        PostOrderTrackingResponse: {
            success?: boolean;
            message?: string | null;
        };
        PostOrderTrackingModel: {
            waybill: string;
            trackingUrl: string;
            isReturnTracking: boolean;
        };
        GetWayOfDeliveryTypesModel: {
            wayOfDeliveryTypes?: (components["schemas"]["GetWayOfDeliveryTypeModel"])[] | null;
        };
        GetWayOfDeliveryTypeModel: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        PostWayOfDeliveryTypeResponse: {
            /** Format: int32 */
            wayOfDeliveryTypeId?: number | null;
            success?: boolean;
            message?: string | null;
        };
        PostWayOfDeliveryTypeModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            code: string;
            name: string;
        };
        GetOrderClassesModel: {
            orderClasses?: (components["schemas"]["GetOrderClassModel"])[] | null;
        };
        GetOrderClassModel: {
            code?: string | null;
            name?: string | null;
            comment?: string | null;
        };
        GetOrderStatusesModel: {
            orderStatuses?: (components["schemas"]["GetOrderStatusModel"])[] | null;
        };
        GetOrderStatusModel: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetOrderTypesModel: {
            orderTypes?: (components["schemas"]["GetOrderTypeModel"])[] | null;
        };
        GetOrderTypeModel: components["schemas"]["CodeNamePair"] & Record<string, never>;
        GetOrderModel: {
            goodsOwner?: components["schemas"]["GetOrderGoodsOwner"];
            orderInfo?: components["schemas"]["GetOrderInfo"];
            consignee?: components["schemas"]["GetOrderConsignee"];
            parcels?: (components["schemas"]["GetOrderParcel"])[] | null;
            orderLines?: (components["schemas"]["GetOrderLine"])[] | null;
            transporter?: components["schemas"]["GetOrderTransporter"];
            returnTransporter?: components["schemas"]["GetOrderTransporter"];
            tracking?: (components["schemas"]["GetOrderTracking"])[] | null;
            classes?: (components["schemas"]["GetOrderClass"])[] | null;
            shipmentInfo?: components["schemas"]["GetOrderShipmentInfo"];
        };
        GetOrderGoodsOwner: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        GetOrderInfo: {
            /** Format: int32 */
            orderId?: number;
            orderNumber?: string | null;
            goodsOwnerOrderId?: string | null;
            referenceNumber?: string | null;
            salesCode?: string | null;
            orderRemark?: string | null;
            deliveryInstruction?: string | null;
            servicePointCode?: string | null;
            freeText1?: string | null;
            freeText2?: string | null;
            freeText3?: string | null;
            orderType?: components["schemas"]["CodeNamePair"];
            wayOfDelivery?: components["schemas"]["CodeNamePair"];
            /** Format: date-time */
            deliveryDate?: string;
            /** Format: date-time */
            createdDate?: string;
            /** Format: date-time */
            shippedTime?: string | null;
            wayBill?: string | null;
            returnWayBill?: string | null;
            orderStatus?: components["schemas"]["GetOrderStatus"];
            emailNotification?: components["schemas"]["GetOrderNotification"];
            smsNotification?: components["schemas"]["GetOrderNotification"];
            telephoneNotification?: components["schemas"]["GetOrderNotification"];
            /** Format: decimal */
            orderedNumberOfItems?: number;
            /** Format: decimal */
            allocatedNumberOfItems?: number;
            /** Format: decimal */
            pickedNumberOfItems?: number;
            customsInfo?: components["schemas"]["GetOrderCustomsInfo"];
            preparedTransportDocumentId?: string | null;
            warehouse?: components["schemas"]["GetOrderWarehouse"];
            termsOfDeliveryType?: components["schemas"]["CodeNamePair"];
            /** Format: decimal */
            customerPrice?: number | null;
            consigneeOrderNumber?: string | null;
            warehouseInstruction?: string | null;
            marketPlace?: components["schemas"]["GetOrderMarketPlace"];
            /** Format: int32 */
            pickingPriority?: number | null;
            productionCode?: string | null;
            advanced?: components["schemas"]["GetOrderInfoAdvanced"];
        };
        GetOrderStatus: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetOrderNotification: {
            toBeNotified?: boolean;
            value?: string | null;
        };
        GetOrderCustomsInfo: {
            customsValueCurrencyCode?: string | null;
        };
        GetOrderWarehouse: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        GetOrderMarketPlace: {
            marketPlace?: string | null;
            marketPlaceOrderNumber?: string | null;
        };
        GetOrderInfoAdvanced: {
            invoiceNumber?: string | null;
            /** Format: date-time */
            arrivalDate?: string | null;
            /** Format: date-time */
            deliveryDateWithTime?: string;
            backOrderInfo?: components["schemas"]["GetOrderBackOrderInfo"];
        };
        GetOrderBackOrderInfo: {
            /** Format: int32 */
            backOrderForOrderId?: number;
        };
        GetOrderConsignee: {
            customerNumber?: string | null;
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            countryStateCode?: string | null;
            remark?: string | null;
            doorCode?: string | null;
            advanced?: components["schemas"]["GetOrderConsigneeAddressAdvanced"];
            invoiceAddress?: components["schemas"]["GetOrderConsigneeInvoiceAddress"];
            /** Format: int32 */
            id?: number;
        };
        GetOrderConsigneeAddressAdvanced: {
            telephoneNotification?: components["schemas"]["GetOrderConsigneeCustomerNotification"];
            emailNotification?: components["schemas"]["GetOrderConsigneeCustomerNotification"];
            smsNotification?: components["schemas"]["GetOrderConsigneeCustomerNotification"];
        };
        GetOrderConsigneeCustomerNotification: {
            toBeNotified?: boolean;
            value?: string | null;
        };
        GetOrderConsigneeInvoiceAddress: {
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            countryStateCode?: string | null;
            advanced?: components["schemas"]["GetOrderConsigneeInvoiceAddressAdvanced"];
        };
        GetOrderConsigneeInvoiceAddressAdvanced: {
            telephoneNotification?: components["schemas"]["GetOrderConsigneeCustomerInvoiceNotification"];
            emailNotification?: components["schemas"]["GetOrderConsigneeCustomerInvoiceNotification"];
            smsNotification?: components["schemas"]["GetOrderConsigneeCustomerInvoiceNotification"];
        };
        GetOrderConsigneeCustomerInvoiceNotification: {
            value?: string | null;
        };
        GetOrderParcel: {
            /** Format: int32 */
            id?: number;
            parcelNumber?: string | null;
            isReturnParcel?: boolean;
            tracking?: components["schemas"]["GetOrderParcelTracking"];
            advanced?: components["schemas"]["GetOrderParcelAdvanced"];
        };
        GetOrderParcelTracking: {
            trackingUrl?: string | null;
        };
        GetOrderParcelAdvanced: {
            parcelSerialNumber?: string | null;
        };
        GetOrderLine: {
            /** Format: int32 */
            id?: number;
            rowNumber?: string | null;
            article?: components["schemas"]["GetOrderArticle"];
            comment?: string | null;
            /** Format: decimal */
            orderedNumberOfItems?: number;
            /** Format: decimal */
            allocatedNumberOfItems?: number;
            /** Format: decimal */
            pickedNumberOfItems?: number;
            /** Format: decimal */
            packedNumberOfItems?: number;
            /** Format: decimal */
            reportedNumberOfItems?: number | null;
            shouldBePicked?: boolean;
            pickedArticleItems?: (components["schemas"]["GetOrderPickedArticleItem"])[] | null;
            subOrderLines?: (components["schemas"]["GetOrderLine"])[] | null;
            serialNumber?: string | null;
            /** Format: decimal */
            lineTotalCustomsValue?: number | null;
            batchNumber?: string | null;
            /** Format: decimal */
            reportedReturnedNumberOfItems?: number | null;
            lineType?: components["schemas"]["CodeNamePair"];
            prices?: components["schemas"]["GetOrderLinePrices"];
            customerArticleNumber?: string | null;
            externalId?: string | null;
            /** Format: decimal */
            returnedNumberOfItems?: number;
            freeValues?: components["schemas"]["GetOrderLineFreeValues"];
        };
        GetOrderArticle: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
            productCode?: string | null;
            articleKind?: string | null;
        };
        GetOrderPickedArticleItem: {
            /** Format: int32 */
            articleItemId?: number;
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: date-time */
            inDate?: string;
            serial?: string | null;
            caseNumber?: string | null;
            batchNumber?: string | null;
            container?: string | null;
            comment?: string | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            volume?: number | null;
            isPicked?: boolean;
            isReturned?: boolean;
            /** Format: date-time */
            expiryDate?: string | null;
            /** Format: date-time */
            returnDate?: string | null;
            /** Format: date-time */
            pickedTime?: string | null;
            returnCause?: components["schemas"]["CodeNamePair"];
            location?: string | null;
            locationTypeCode?: string | null;
            articleItemStatus?: components["schemas"]["CodeNamePair"];
            freeText1?: string | null;
            /** Format: date-time */
            packedTime?: string | null;
            handling?: components["schemas"]["GetPickedArticleItemHandling"];
            parcel?: components["schemas"]["GetPickedArticleItemParcel"];
            zoneName?: string | null;
        };
        GetPickedArticleItemHandling: {
            /** Format: int32 */
            pickedByUserId?: number | null;
            /** Format: int32 */
            packedByUserId?: number | null;
        };
        GetPickedArticleItemParcel: {
            /** Format: int32 */
            id?: number;
            parcelNumber?: string | null;
            parcelType?: components["schemas"]["GetPickedArticleItemParcelType"];
            advanced?: components["schemas"]["GetPickedArticleItemParcelAdvanced"];
            parentParcel?: components["schemas"]["GetPickedArticleItemParcelParent"];
        };
        GetPickedArticleItemParcelType: {
            code?: string | null;
        };
        GetPickedArticleItemParcelAdvanced: {
            parcelSerialNumber?: string | null;
        };
        GetPickedArticleItemParcelParent: {
            /** Format: int32 */
            id?: number;
            parcelNumber?: string | null;
            parcelType?: components["schemas"]["GetPickedArticleItemParentParcelType"];
            advanced?: components["schemas"]["GetPickedArticleItemParentParcelAdvanced"];
        };
        GetPickedArticleItemParentParcelType: {
            code?: string | null;
        };
        GetPickedArticleItemParentParcelAdvanced: {
            parcelSerialNumber?: string | null;
        };
        GetOrderLinePrices: {
            /** Format: decimal */
            linePrice?: number | null;
            /** Format: decimal */
            customerLinePrice?: number | null;
            currencyCode?: string | null;
            /** Format: decimal */
            discountPercentage?: number | null;
        };
        GetOrderLineFreeValues: {
            freeText1?: string | null;
        };
        GetOrderTransporter: {
            transporterName?: string | null;
            name?: string | null;
            code?: string | null;
            serviceCode?: string | null;
            transporterContract?: components["schemas"]["GetOrderTransporterContract"];
            serviceComment?: string | null;
        };
        GetOrderTransporterContract: {
            comment?: string | null;
        };
        GetOrderTracking: {
            trackingUrl?: string | null;
            waybill?: string | null;
            /** Format: date-time */
            created?: string;
        };
        GetOrderClass: components["schemas"]["CodeNamePair"] & Record<string, never>;
        GetOrderShipmentInfo: {
            /** Format: int32 */
            shipmentId?: number;
        };
        GetWayBillRowModel: {
            /** Format: int32 */
            wayBillRowId?: number;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            volume?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: int32 */
            numberOfPackages?: number;
            /** Format: int32 */
            approvedNumberOfPackages?: number | null;
            comment?: string | null;
            category?: string | null;
            parcelType?: components["schemas"]["GetWayBillRowParcelTypeModel"];
        };
        GetWayBillRowParcelTypeModel: {
            code?: string | null;
            name?: string | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: decimal */
            loadMeters?: number | null;
            barCode?: string | null;
        };
        PostWaybillRowResponse: {
            /** Format: int32 */
            wayBillRowId?: number;
            success?: boolean;
            message?: string | null;
        };
        PostWayBillRowModel: {
            /** Format: int32 */
            numberOfPackages: number;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            volume?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: int32 */
            approvedNumberOfPackages?: number | null;
            /** Format: decimal */
            loadMeters?: number | null;
            comment?: string | null;
            category?: string | null;
            parcelType: components["schemas"]["PostWaybillParcelParcelType"];
        };
        PostWaybillParcelParcelType: {
            /** Format: int32 */
            id?: number | null;
            code?: string | null;
        };
        GetOrderInvoiceChargeModel: {
            /** Format: int32 */
            invoiceId?: number;
            /** Format: int32 */
            chargeId?: number;
            /** Format: decimal */
            price?: number;
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: date-time */
            actionDate?: string | null;
            comment?: string | null;
            profitCenter?: components["schemas"]["CodeNamePair"];
            invoiceArticle?: components["schemas"]["GetOrderInvoiceArticleModel"];
        };
        GetOrderInvoiceArticleModel: {
            /** Format: int32 */
            invoiceArticleId?: number;
            code?: string | null;
            title?: string | null;
            account?: string | null;
        };
        PatchOrderResponse: {
            /** Format: int32 */
            orderId?: number;
            message?: string | null;
        };
        PatchOrderNumberModel: {
            orderNumber: string;
        };
        PatchOrderClassesModel: {
            classes?: (components["schemas"]["PostOrderClass"])[] | null;
        };
        PostOrderClass: {
            code?: string | null;
            name?: string | null;
            comment?: string | null;
        };
        PatchOrderTransporterModel: {
            transporterCode?: string | null;
            transporterServiceCode?: string | null;
            paymentAdvanced?: components["schemas"]["PatchOrderTransporterPayment"];
        };
        PatchOrderTransporterPayment: {
            consigneeCollects?: boolean | null;
            consigneePays?: components["schemas"]["PatchOrderTransporterConsigneePays"];
            thirdPartyPays?: components["schemas"]["PatchOrderTransporterThirdPartyPays"];
        };
        PatchOrderTransporterConsigneePays: {
            customerNumber: string;
        };
        PatchOrderTransporterThirdPartyPays: {
            customerNumber: string;
        };
        PatchOrderReturnWaybill: {
            returnWaybill: string;
        };
        PatchServicePointCode: {
            servicePointCode: string;
        };
        PatchOrderStatus: {
            /** Format: int32 */
            orderStatusNumber: number;
        };
        PatchOrderWaybill: {
            waybill: string;
        };
        PatchOrderDeliveryDate: {
            /** Format: date-time */
            deliveryDate: string;
        };
        PatchOrderReportedNumberOfItemsModel: {
            /** Format: decimal */
            reportedNumberOfItems: number;
        };
        PatchOrderReportedReturnedNumberOfItemsModel: {
            /** Format: decimal */
            reportedReturnedNumberOfItems: number;
        };
        PostOrderResponse: {
            /** Format: int32 */
            orderId?: number | null;
            message?: string | null;
        };
        PostOrderModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            orderNumber: string;
            /** Format: date-time */
            deliveryDate: string;
            referenceNumber?: string | null;
            goodsOwnerOrderId?: string | null;
            salesCode?: string | null;
            orderRemark?: string | null;
            deliveryInstruction?: string | null;
            servicePointCode?: string | null;
            freeText1?: string | null;
            freeText2?: string | null;
            freeText3?: string | null;
            /** Format: date-time */
            orderFreeDateTime1?: string | null;
            orderType?: components["schemas"]["CodeNamePair"];
            wayOfDelivery?: components["schemas"]["CodeNamePair"];
            consignee: components["schemas"]["PostOrderConsignee"];
            emailNotification?: components["schemas"]["PostOrderNotification"];
            smsNotification?: components["schemas"]["PostOrderNotification"];
            telephoneNotification?: components["schemas"]["PostOrderNotification"];
            transporter?: components["schemas"]["PostOrderTransporter"];
            returnTransporter?: components["schemas"]["PostOrderReturnTransporter"];
            orderLines?: (components["schemas"]["PostOrderLine"])[] | null;
            customsInfo?: components["schemas"]["PostOrderCustomsInfo"];
            preparedTransportDocumentId?: string | null;
            /** Format: decimal */
            freightPrice?: number | null;
            /** Format: int32 */
            warehouseId?: number | null;
            classes?: (components["schemas"]["PostOrderClass"])[] | null;
            termsOfDeliveryType?: components["schemas"]["CodeNamePair"];
            /** Format: decimal */
            customerPrice?: number | null;
            advanced?: components["schemas"]["PostOrderAdvanced"];
            consigneeOrderNumber?: string | null;
            warehouseInstruction?: string | null;
            marketPlace?: components["schemas"]["PostOrderMarketPlace"];
            /** Format: int32 */
            pickingPriority?: number | null;
            productionCode?: string | null;
            transporterBulkId?: string | null;
        };
        PostOrderConsignee: {
            customerNumber?: string | null;
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            countryStateCode?: string | null;
            remark?: string | null;
            doorCode?: string | null;
            advanced?: components["schemas"]["PostOrderConsigneeAddressAdvanced"];
            invoiceAddress?: components["schemas"]["PostOrderConsigneeInvoiceAddress"];
            organisationNumber?: string | null;
            vatNumber?: string | null;
        };
        PostOrderConsigneeAddressAdvanced: {
            telephoneNotification?: components["schemas"]["PostOrderConsigneeCustomerNotification"];
            emailNotification?: components["schemas"]["PostOrderConsigneeCustomerNotification"];
            smsNotification?: components["schemas"]["PostOrderConsigneeCustomerNotification"];
            externalCustomerCode?: string | null;
        };
        PostOrderConsigneeCustomerNotification: {
            toBeNotified?: boolean;
            value?: string | null;
        };
        PostOrderConsigneeInvoiceAddress: {
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            countryStateCode?: string | null;
            advanced?: components["schemas"]["PostOrderConsigneeInvoiceAddressAdvanced"];
        };
        PostOrderConsigneeInvoiceAddressAdvanced: {
            telephoneNotification?: components["schemas"]["PostOrderConsigneeCustomerInvoiceNotification"];
            emailNotification?: components["schemas"]["PostOrderConsigneeCustomerInvoiceNotification"];
            smsNotification?: components["schemas"]["PostOrderConsigneeCustomerInvoiceNotification"];
        };
        PostOrderConsigneeCustomerInvoiceNotification: {
            value?: string | null;
        };
        PostOrderNotification: {
            toBeNotified?: boolean;
            value?: string | null;
        };
        PostOrderTransporter: {
            transporterCode?: string | null;
            transporterServiceCode?: string | null;
            paymentAdvanced?: components["schemas"]["PostOrderTransporterPayment"];
        };
        PostOrderTransporterPayment: {
            consigneeCollects?: boolean | null;
            consigneePays?: components["schemas"]["PostOrderTransporterConsigneePays"];
            thirdPartyPays?: components["schemas"]["PostOrderTransporterThirdPartyPays"];
            senderPays?: components["schemas"]["PostOrderTransporterSenderPaysPays"];
        };
        PostOrderTransporterConsigneePays: {
            customerNumber: string;
        };
        PostOrderTransporterThirdPartyPays: {
            customerNumber: string;
        };
        PostOrderTransporterSenderPaysPays: {
            ediCode: string;
        };
        PostOrderReturnTransporter: {
            transporterCode?: string | null;
            transporterServiceCode?: string | null;
        };
        PostOrderLine: {
            rowNumber: string;
            articleNumber: string;
            /** Format: decimal */
            numberOfItems?: number;
            comment?: string | null;
            shouldBePicked?: boolean | null;
            serialNumber?: string | null;
            /** Format: decimal */
            lineTotalCustomsValue?: number | null;
            batchNumber?: string | null;
            lineType?: components["schemas"]["CodeNamePair"];
            prices?: components["schemas"]["PostOrderLinePrices"];
            customerArticleNumber?: string | null;
            warehouseInstruction?: string | null;
            externalId?: string | null;
            articleItemStatus?: components["schemas"]["CodeNamePair"];
            lineFreeValues?: components["schemas"]["PostOrderLineFreeValues"];
        };
        PostOrderLinePrices: {
            /** Format: decimal */
            linePrice?: number | null;
            /** Format: decimal */
            customerLinePrice?: number | null;
            currencyCode?: string | null;
            /** Format: decimal */
            discountPercentage?: number | null;
        };
        PostOrderLineFreeValues: {
            freeText1?: string | null;
        };
        PostOrderCustomsInfo: {
            customsValueCurrencyCode?: string | null;
        };
        PostOrderAdvanced: {
            orderTextLines?: (components["schemas"]["PostOrderTextLine"])[] | null;
            /** Format: date-time */
            arrivalDate?: string | null;
            wayOfDeliveryString?: string | null;
            transporterOrderNumber?: string | null;
            invoiceNumber?: string | null;
            /** Format: date-time */
            arrivalDateFrom?: string | null;
            termsOfPaymentString?: string | null;
            termsOfDeliveryString?: string | null;
            communication?: string | null;
        };
        PostOrderTextLine: {
            rowNumber: string;
            comment?: string | null;
            /** Format: decimal */
            numberOfItems?: number;
        };
        PostOrderMarketPlace: {
            marketPlace?: string | null;
            marketPlaceOrderNumber?: string | null;
        };
        GetReturnCausesModel: {
            returnCauses?: (components["schemas"]["GetReturnCauseModel"])[] | null;
        };
        GetReturnCauseModel: {
            code?: string | null;
            name?: string | null;
            isRemoveCause?: boolean;
            isChangeCause?: boolean;
            isReturnCommentMandatory?: boolean;
            /** Format: int32 */
            id?: number;
        };
        PostReturnCauseResponse: {
            /** Format: int32 */
            returnCauseId?: number | null;
            success?: boolean;
            message?: string | null;
        };
        PostReturnCauseModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            code: string;
            name: string;
            isRemoveCause?: boolean | null;
            isChangeCause?: boolean | null;
            isReturnCommentMandatory?: boolean | null;
        };
        GetReturnOrderModel: {
            returnOrderInfo?: components["schemas"]["GetReturnOrderInfo"];
            customerOrderInfo?: components["schemas"]["GetReturnOrderCustomerOrderInfo"];
            returnOrderLines?: (components["schemas"]["GetReturnOrderLine"])[] | null;
        };
        GetReturnOrderInfo: {
            /** Format: int32 */
            returnOrderId?: number;
            returnOrderNumber?: string | null;
            comment?: string | null;
            /** Format: date-time */
            inDate?: string | null;
            returnOrderStatus?: components["schemas"]["GetReturnOrderStatus"];
            warehouse?: components["schemas"]["GetReturnOrderWarehouse"];
            returnOrderHandlingComment?: string | null;
        };
        GetReturnOrderStatus: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetReturnOrderWarehouse: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        GetReturnOrderCustomerOrderInfo: {
            /** Format: int32 */
            orderId?: number;
            orderNumber?: string | null;
        };
        GetReturnOrderLine: {
            /** Format: int32 */
            returnOrderLineId?: number;
            returnOrderRowNumber?: string | null;
            customerOrderLine?: components["schemas"]["GetReturnOrderLineCustomerOrderLine"];
            article?: components["schemas"]["GetReturnOrderLineArticle"];
            returnCause?: components["schemas"]["CodeNamePair"];
            /** Format: decimal */
            returnedNumberOfItems?: number;
            /** Format: decimal */
            pickedNumberOfItems?: number;
            /** Format: decimal */
            toBeReturnedNumberOfItems?: number;
            /** Format: decimal */
            returnedRemovedByInventoryNumberOfItems?: number;
            returnedArticleItems?: (components["schemas"]["GetReturnedArticleItem"])[] | null;
        };
        GetReturnOrderLineCustomerOrderLine: {
            /** Format: int32 */
            orderLineId?: number;
            customerOrderRowNumber?: string | null;
        };
        GetReturnOrderLineArticle: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
        };
        GetReturnedArticleItem: {
            /** Format: decimal */
            numberOfItems?: number;
            batch?: string | null;
            serial?: string | null;
            /** Format: date-time */
            expiryDate?: string | null;
            container?: string | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            volume?: number | null;
            comment?: string | null;
            /** Format: date-time */
            returnTime?: string | null;
            returnComment?: string | null;
            isReturnRemovedByInventory?: boolean;
            returnCause?: components["schemas"]["CodeNamePair"];
            articleItemStatus?: components["schemas"]["CodeNamePair"];
            articleItemCategory?: components["schemas"]["CodeNamePair"];
        };
        PostReturnOrderResponse: {
            /** Format: int32 */
            returnOrderId?: number | null;
            message?: string | null;
        };
        PostReturnOrderModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            returnOrderNumber: string;
            customerOrder: components["schemas"]["PostReturnOrderCustomerOrder"];
            comment?: string | null;
            /** Format: date-time */
            inDate?: string | null;
            returnOrderLines: (components["schemas"]["PostReturnOrderLine"])[];
            /** Format: int32 */
            warehouseId?: number | null;
            tracking?: (components["schemas"]["PostReturnOrderTracking"])[] | null;
            returnOrderHandlingComment?: string | null;
        };
        PostReturnOrderCustomerOrder: {
            /** Format: int32 */
            orderId?: number;
        };
        PostReturnOrderLine: {
            returnOrderRowNumber: string;
            customerOrderLine: components["schemas"]["PostReturnOrderLineCustomerOrderLine"];
            /** Format: decimal */
            toBeReturnedNumberOfItems: number;
            returnCause?: components["schemas"]["CodeNamePair"];
        };
        PostReturnOrderLineCustomerOrderLine: {
            /** Format: int32 */
            orderLineId?: number;
        };
        PostReturnOrderTracking: {
            waybill?: string | null;
            trackingUrl?: string | null;
        };
        GetReturnOrderStatusesModel: {
            returnOrderStatuses?: (components["schemas"]["GetReturnOrderStatusModel"])[] | null;
        };
        GetReturnOrderStatusModel: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetPurchaseOrderStatusesModel: {
            orderStatuses?: (components["schemas"]["GetPurchaseOrderStatusModel"])[] | null;
        };
        GetPurchaseOrderStatusModel: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetPurchaseOrderTypesModel: {
            purchaseOrderTypes?: (components["schemas"]["GetPurchaseOrderTypeModel"])[] | null;
        };
        GetPurchaseOrderTypeModel: components["schemas"]["CodeNamePair"] & Record<string, never>;
        GetPurchaseOrderModel: {
            goodsOwner?: components["schemas"]["GetPurchaseOrderGoodsOwner"];
            supplierInfo?: components["schemas"]["GetPurchaseOrderSupplierInfo"];
            purchaseOrderInfo?: components["schemas"]["GetPurchaseOrderInfo"];
            purchaseOrderLines?: (components["schemas"]["GetPurchaseOrderLine"])[] | null;
            sellerInfo?: components["schemas"]["GetPurchaseOrderSellerInfo"];
        };
        GetPurchaseOrderGoodsOwner: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
        };
        GetPurchaseOrderSupplierInfo: {
            supplierNumber?: string | null;
            supplierName?: string | null;
        };
        GetPurchaseOrderInfo: {
            /** Format: int32 */
            purchaseOrderId?: number;
            purchaseOrderNumber?: string | null;
            supplierOrderNumber?: string | null;
            goodsOwnerReference?: string | null;
            referenceNumber?: string | null;
            purchaseOrderStatus?: components["schemas"]["GetPurchaseOrderStatus"];
            purchaseOrderType?: components["schemas"]["CodeNamePair"];
            /** Format: date-time */
            inDate?: string | null;
            purchaseOrderRemark?: string | null;
            warehouse?: components["schemas"]["GetPurchaseOrderWarehouse"];
            /** Format: date-time */
            createdDate?: string | null;
            advanced?: components["schemas"]["GetAdvancedPurchaseOrderInfo"];
            freeValues?: components["schemas"]["GetPurchaseOrderFreeValues"];
        };
        GetPurchaseOrderStatus: {
            /** Format: int32 */
            number?: number;
            text?: string | null;
        };
        GetPurchaseOrderWarehouse: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
        };
        GetAdvancedPurchaseOrderInfo: {
            /** Format: date-time */
            arrivalDate?: string | null;
            /** Format: date-time */
            orderDate?: string | null;
            container?: string | null;
            purchaseOrderIsReturnType?: boolean;
        };
        GetPurchaseOrderFreeValues: {
            freeText1?: string | null;
            freeText2?: string | null;
            freeText3?: string | null;
            freeText4?: string | null;
            freeText5?: string | null;
            /** Format: decimal */
            freeDecimal1?: number | null;
            /** Format: decimal */
            freeDecimal2?: number | null;
            freeBool1?: boolean | null;
            freeBool2?: boolean | null;
        };
        GetPurchaseOrderLine: {
            /** Format: int32 */
            id?: number;
            rowNumber?: string | null;
            article?: components["schemas"]["GetPurchaseOrderArticle"];
            comment?: string | null;
            /** Format: decimal */
            rowPrice?: number | null;
            /** Format: decimal */
            advisedNumberOfItems?: number;
            /** Format: decimal */
            receivedNumberOfItems?: number;
            /** Format: decimal */
            reportedNumberOfItems?: number | null;
            articleItems?: (components["schemas"]["GetPurchaseOrderArticleItem"])[] | null;
            subPurchaseOrderLines?: (components["schemas"]["GetPurchaseOrderLine"])[] | null;
            externalOrderLineId?: string | null;
            lineType?: components["schemas"]["CodeNamePair"];
            freeValues?: components["schemas"]["GetPurchaseOrderLineFreeValues"];
        };
        GetPurchaseOrderArticle: {
            /** Format: int32 */
            articleSystemId?: number;
            articleNumber?: string | null;
            articleName?: string | null;
            productCode?: string | null;
        };
        GetPurchaseOrderArticleItem: {
            /** Format: int32 */
            originalArticleItemId?: number;
            /** Format: decimal */
            numberOfItems?: number;
            /** Format: date-time */
            inDate?: string;
            serial?: string | null;
            caseNumber?: string | null;
            batchNumber?: string | null;
            container?: string | null;
            comment?: string | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: date-time */
            expiryDate?: string | null;
            location?: string | null;
            articleItemStatus?: components["schemas"]["CodeNamePair"];
        };
        GetPurchaseOrderLineFreeValues: {
            freeText1?: string | null;
            freeText2?: string | null;
        };
        GetPurchaseOrderSellerInfo: {
            sellerNumber?: string | null;
            sellerName?: string | null;
        };
        PatchPurchaseOrderReportedNumberOfItemsModel: {
            /** Format: decimal */
            reportedNumberOfItems: number;
        };
        PatchPurchaseOrderResponse: {
            /** Format: int32 */
            purchaseOrderId?: number;
            message?: string | null;
        };
        PatchPurchaseOrderFreeBool1: {
            freeBool1: boolean;
        };
        PatchPurchaseOrderInDate: {
            /** Format: date-time */
            inDate?: string;
        };
        PatchPurchaseOrderAdvisedDate: {
            /** Format: date-time */
            advisedDate?: string | null;
        };
        PatchPurchaseOrderStatus: {
            /** Format: int32 */
            purchaseOrderStatusNumber: number;
        };
        PostPurchaseOrderResponse: {
            /** Format: int32 */
            purchaseOrderId?: number | null;
            message?: string | null;
        };
        PostPurchaseOrderModel: {
            /** Format: int32 */
            goodsOwnerId: number;
            purchaseOrderNumber: string;
            supplierOrderNumber?: string | null;
            goodsOwnerReference?: string | null;
            referenceNumber?: string | null;
            /** Format: date-time */
            inDate?: string | null;
            supplierInfo?: components["schemas"]["PostPurchaseOrderSupplierInfo"];
            purchaseOrderType?: components["schemas"]["CodeNamePair"];
            purchaseOrderLines?: (components["schemas"]["PostPurchaseOrderLine"])[] | null;
            purchaseOrderRemark?: string | null;
            /** Format: int32 */
            warehouseId?: number | null;
            freeValues?: components["schemas"]["PostPurchaseOrderFreeValues"];
            advanced?: components["schemas"]["PostPurchaseOrderAdvanced"];
            customsInfo?: components["schemas"]["PostPurchaseOrderCustoms"];
            sellerInfo?: components["schemas"]["PostPurchaseOrderSellerInfo"];
        };
        PostPurchaseOrderSupplierInfo: {
            supplierNumber?: string | null;
            supplierName?: string | null;
            supplierAddress?: components["schemas"]["PostPurchaseOrderSupplierAddress"];
        };
        PostPurchaseOrderSupplierAddress: {
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            telePhone?: string | null;
            remark?: string | null;
            email?: string | null;
            mobilePhone?: string | null;
            countryStateCode?: string | null;
            countryCode?: string | null;
            deliveryInstruction?: string | null;
            isVisible?: boolean | null;
            notifyBySMS?: boolean | null;
            notifyByEmail?: boolean | null;
            notifyByTelephone?: boolean | null;
        };
        PostPurchaseOrderLine: {
            rowNumber: string;
            articleNumber: string;
            /** Format: decimal */
            numberOfItems?: number;
            comment?: string | null;
            /** Format: decimal */
            rowPrice?: number | null;
            currencyCode?: string | null;
            /** Format: int32 */
            articleItemStatusId?: number | null;
            batchNumber?: string | null;
            externalOrderLineId?: string | null;
            /** Format: date-time */
            inDate?: string | null;
            serialNumber?: string | null;
            /** Format: date-time */
            expiryDate?: string | null;
            /** Format: date-time */
            productionDate?: string | null;
            lineFreeValues?: components["schemas"]["PostPurchaseOrderLineFreeValues"];
            lineType?: components["schemas"]["CodeNamePair"];
        };
        PostPurchaseOrderLineFreeValues: {
            /** Format: decimal */
            freeDecimal1?: number | null;
            freeText1?: string | null;
            freeText2?: string | null;
        };
        PostPurchaseOrderFreeValues: {
            freeText1?: string | null;
            freeText2?: string | null;
            freeText3?: string | null;
            freeText4?: string | null;
            freeText5?: string | null;
            /** Format: decimal */
            freeDecimal1?: number | null;
            /** Format: decimal */
            freeDecimal2?: number | null;
            freeBoolean1?: boolean | null;
            freeBoolean2?: boolean | null;
        };
        PostPurchaseOrderAdvanced: {
            container?: string | null;
            /** Format: date-time */
            orderDate?: string | null;
            /** Format: date-time */
            advisedDate?: string | null;
            /** Format: int32 */
            purchaseOrderStatusCreated?: number | null;
            purchaseOrderIsReturnType?: boolean | null;
        };
        PostPurchaseOrderCustoms: {
            termsOfDeliveryType?: components["schemas"]["CodeNamePair"];
            termsOfDeliveryTypeLocation?: string | null;
        };
        PostPurchaseOrderSellerInfo: {
            sellerNumber?: string | null;
            sellerName?: string | null;
            sellerAddress?: components["schemas"]["PostPurchaseOrderSellerAddress"];
        };
        PostPurchaseOrderSellerAddress: {
            name?: string | null;
            address?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            telePhone?: string | null;
            remark?: string | null;
            email?: string | null;
            mobilePhone?: string | null;
            countryStateCode?: string | null;
            countryCode?: string | null;
            deliveryInstruction?: string | null;
            isVisible?: boolean | null;
            notifyBySMS?: boolean | null;
            notifyByEmail?: boolean | null;
            notifyByTelephone?: boolean | null;
        };
        PurchaseOrderArticleItemResponse: {
            success?: boolean;
            messages?: (components["schemas"]["PurchaseOrderArticleItemResponseMessage"])[] | null;
        };
        PurchaseOrderArticleItemResponseMessage: {
            /** Format: int32 */
            purchaseOrderLineId?: number;
            /** Format: int32 */
            articleItemId?: number | null;
            success?: boolean;
            message?: string | null;
        };
        PostPurchaseOrderArticleItemsModel: {
            items?: (components["schemas"]["PostPurchaseOrderArticleItemModel"])[] | null;
        };
        PostPurchaseOrderArticleItemModel: {
            /** Format: int32 */
            purchaseOrderLineId: number;
            serial?: string | null;
            batch?: string | null;
            /** Format: decimal */
            numberOfItems?: number | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: decimal */
            volume?: number | null;
            /** Format: decimal */
            price?: number | null;
            comment?: string | null;
            container?: string | null;
            caseNumber?: string | null;
            /** Format: int32 */
            statusId?: number | null;
            /** Format: date-time */
            expiryDate?: string | null;
            /** Format: date-time */
            productionDate?: string | null;
        };
        GetTransporterContract: {
            ediCode?: string | null;
            transporterName?: string | null;
            transporterCode?: string | null;
            transporterServiceCode?: string | null;
            transporterServices?: (components["schemas"]["GetTransporterService"])[] | null;
        };
        GetTransporterService: {
            transporterServiceName?: string | null;
            transporterServiceCode?: string | null;
        };
        ParcelTypeModel: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
            /** Format: decimal */
            weight?: number | null;
            /** Format: decimal */
            length?: number | null;
            /** Format: decimal */
            width?: number | null;
            /** Format: decimal */
            height?: number | null;
            /** Format: decimal */
            loadMeters?: number | null;
            /** Format: decimal */
            area?: number | null;
            barCode?: string | null;
        };
        WarehouseModel: {
            /** Format: int32 */
            id?: number;
            code?: string | null;
            name?: string | null;
            address?: components["schemas"]["WarehouseAddressModel"];
        };
        WarehouseAddressModel: {
            name?: string | null;
            address1?: string | null;
            address2?: string | null;
            address3?: string | null;
            postCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            countryStateCode?: string | null;
            deliveryInstruction?: string | null;
            addressFreeText1?: string | null;
            telephoneNotification?: components["schemas"]["WarehouseAddressNotification"];
            emailNotification?: components["schemas"]["WarehouseAddressNotification"];
            smsNotification?: components["schemas"]["WarehouseAddressNotification"];
            addressFreeText2?: string | null;
        };
        WarehouseAddressNotification: {
            toBeNotified?: boolean;
            value?: string | null;
        };
        ZoneModel: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
            position?: components["schemas"]["PositionModel"];
            aisles?: (components["schemas"]["AisleModel"])[] | null;
        };
        PositionModel: {
            /** Format: int32 */
            x?: number | null;
            /** Format: int32 */
            y?: number | null;
        };
        AisleModel: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
            position?: components["schemas"]["PositionModel"];
            locations?: (components["schemas"]["LocationModel"])[] | null;
        };
        LocationModel: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
            barcode?: string | null;
            position?: components["schemas"]["LocationPositionModel"];
            /** Format: int32 */
            locationTypeId?: number | null;
            /** Format: int32 */
            pickingPriority?: number;
            isPickingLocation?: boolean;
            isLocked?: boolean;
            isLockedForSale?: boolean;
        };
        LocationPositionModel: {
            /** Format: int32 */
            x?: number | null;
            /** Format: int32 */
            y?: number | null;
            /** Format: int32 */
            z?: number | null;
        };
        LocationTypeModel: {
            /** Format: int32 */
            id?: number;
            name?: string | null;
            code?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type external = Record<string, never>;
export interface operations {
    /** Get all article item statuses. */
    ArticleItems_GetOrderClasses: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["ArticleItemStatusModel"];
                };
            };
        };
    };
    /** Get all article items which match the specified search criteria. */
    ArticleItems_GetArticleItems: {
        parameters: {
            query: {
                goodsOwnerId: number;
                /** @description Only return article items for this article number (only 1 article number may be specified). */
                articleNumber?: string | null;
                /** @description Only return articles whose article system ID is greater than or equal to this. */
                articleSystemIdFrom?: number | null;
                /** @description Maximum number of articles to return. */
                maxArticlesToGet?: number | null;
                /** @description Only return article items for these article numbers (several article numbers may be specified). */
                articleNumbers?: (string)[] | null;
                /** @description Only return article items which are at these locations (several location names may be specified). */
                locationNames?: (string)[] | null;
            };
        };
        responses: {
            /** @description A list of article items, specified per article */
            200: {
                content: {
                    "application/json": (components["schemas"]["GetArticleItemsModel"])[] | null;
                };
            };
        };
    };
    /** Get an article. */
    Articles_Get: {
        parameters: {
            path: {
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetArticleModel"];
                };
            };
        };
    };
    /** Update an existing article. Note that the articleSystemId refers to Ongoing WMS' internal ID for the article. */
    Articles_Put: {
        parameters: {
            path: {
                /** @description Article system ID for the article which the file is attached to. */
                articleSystemId: number;
            };
        };
        /** @description Article object, containing all article data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostArticleResponse"];
                };
            };
        };
    };
    /** Get all files which are attached to a specific article. */
    Articles_GetFiles: {
        parameters: {
            path: {
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetFileModel"])[] | null;
                };
            };
        };
    };
    /** Create or update a file which is attached to an article. The filename will be used to check if the file already exists. */
    Articles_PutFileUsingFilename: {
        parameters: {
            query: {
                /** @description File name. */
                fileName: string | null;
            };
            path: {
                /** @description Article system ID for the article which the file is attached to. */
                articleSystemId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileNoFilenameModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Create a new file and attach it to the specified article. */
    Articles_Post: {
        parameters: {
            path: {
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Update a file which is attached to an article. */
    Articles_Put2: {
        parameters: {
            path: {
                /** @description Article system ID for the article which the file is attached to. */
                articleSystemId: number;
                /** @description File ID, identifying the file which is to be updated. */
                fileId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Get all articles which match the specified search criteria. */
    Articles_GetAll: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Article number. */
                articleNumber?: string | null;
                /** @description Only return articles whose article system ID is greater than or equal to this. */
                articleSystemIdFrom?: number | null;
                /** @description Maximum number of articles to return. */
                maxArticlesToGet?: number | null;
                /** @description Only return articles where the stock balances have changed after this time. NOTE: this value must must be within 24 hours of the current time. */
                stockInfoChangedFrom?: string | null;
                articleNumbers?: (string)[] | null;
                /** @description Only return articles where the article data has changed after this time. */
                articleDataLastUpdatedFrom?: string | null;
                /** @description Only return articles where which are actually in stock (i.e. those articles having numberOfItems > 0). */
                onlyArticlesInStock?: boolean | null;
                /** @description Product code. */
                productCode?: string | null;
                productCodes?: (string)[] | null;
                articleNameContains?: (string)[] | null;
                /** @description Only return articles of these article classes. */
                articleClassIds?: (number)[] | null;
                barCodes?: (string)[] | null;
                /** @description Only return articles whose physical quantity is below the stock limit. */
                onlyArticlesBelowStockLimit?: boolean | null;
                /** @description Only return articles which have "physical quantity minus booked quantity" below the stock limit. */
                onlyArticlesBelowStockLimitConsideringNumberOfBookedItems?: boolean | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetArticleModel"])[] | null;
                };
            };
        };
    };
    /** Create or update an article. If no article with the specified article number exists, it will be created. Otherwise, it will be updated. */
    Articles_Put3: {
        /** @description Article object, containing all article data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostArticleResponse"];
                };
            };
        };
    };
    /** Get the historical stock balances for all articles at a specific time in the past. */
    Articles_GetHistoricalInventory: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description The date for which you want stock balance information. */
                stockDate: string;
                /** @description If specified, will only give you the stock balances for this particular warehouse. */
                warehouseId?: number | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetHistoricalInventoryModel"])[];
                };
            };
        };
    };
    /** Get inventory info (specified per warehouse) for the articles which match the filter. */
    Articles_GetInventoryPerWarehouse: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Only return articles whose article system ID is greater than or equal to this. */
                articleSystemIdFrom?: number | null;
                /** @description Maximum number of articles to return. */
                maxArticlesToGet?: number | null;
                /** @description Only return info for these article numbers. */
                articleNumbers?: (string)[] | null;
                /** @description Only return info for these warehouses. */
                warehouseIds?: (number)[] | null;
                /** @description Only return articles where which are in stock in at least one warehouse. */
                onlyArticlesInStock?: boolean | null;
                /** @description Only return articles where the stock info has changed after this time. Note that it must be be within 24 hours of the current time. */
                stockInfoChangedFrom?: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetArticleInventoryPerWarehouseModel"])[];
                };
            };
        };
    };
    /** Get dangerous goods info for an article. */
    Articles_GetDangerousGoods: {
        parameters: {
            path: {
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetArticleDangerousGoodsModel"];
                };
            };
        };
    };
    /** Update the dangerous goods info of an article. Note that the UN number must exist in Ongoing WMS before any articles can be set to that UN number. */
    Articles_PutDangerousGoods: {
        parameters: {
            path: {
                /** @description Article system ID for the article which the file is attached to. */
                articleSystemId: number;
            };
        };
        /** @description Dangerous goods information. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleDangerousGoodsModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostDangerousGoodsRepsonse"];
                };
            };
        };
    };
    /** Get dangerous goods info for articles, using article numbers. */
    Articles_GetDangerousGoodsByArticleNumber: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Article numbers to get dangerous goods information for. */
                articleNumbers?: (string)[] | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetArticleDangerousGoodsModel"])[];
                };
            };
        };
    };
    /** Update the dangerous goods info of an article via the article number. */
    Articles_PutDangerousGoodsByArticleNumber: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleDangerousGoodsByArticleNumberModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostDangerousGoodsRepsonse"];
                };
            };
        };
    };
    /** Get all structure rows for structure articles and production articles. */
    Articles_GetStructureRows: {
        parameters: {
            path: {
                /** @description Article system ID of the structure article or production article. */
                articleSystemId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetArticleStructureDefinitionModel"];
                };
            };
        };
    };
    /** Get all structure rows for structure articles and production articles, by using article numbers. */
    Articles_GetStructureRowsByArticleNumber: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Article numbers to get structure information for. */
                articleNumbers?: (string)[] | null;
                /** @description If you want to filter for strucutre articles, put 'Structure' here. If you want to filter for production articles, put 'Production' here. */
                articleKind: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetArticleStructureDefinitionModel"])[];
                };
            };
        };
    };
    /** Get all article classes. */
    Articles_GetArticleClasses: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetArticleClassesModel"];
                };
            };
        };
    };
    /** Create or update an article class. If there is no article class with the specified code, it will be created. Otherwise, the existing article class will be updated. */
    Articles_PutArticleClass: {
        /** @description An object containing the article class type data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleClassModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostArticleClassResponse"];
                };
            };
        };
    };
    /** Update an article class. The ID will be used to identify the article class. */
    Articles_PutArticleClassUsingId: {
        parameters: {
            path: {
                /** @description Article class ID. */
                articleClassId: number;
            };
        };
        /** @description An object containing the article class data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostArticleClassModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostArticleClassResponse"];
                };
            };
        };
    };
    /** Delete an article class. This will affect any articles which have previously been assigned to the class. */
    Articles_DeleteArticleClass: {
        parameters: {
            path: {
                /** @description Article class ID. */
                articleClassId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostArticleClassResponse"];
                };
            };
        };
    };
    /** Set the classes on an article. */
    Articles_SetArticleClasses: {
        parameters: {
            path: {
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        /** @description Contains the article class IDs. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PortArticleArticleClassesModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Get a specific inventory adjustment. */
    InventoryAdjustments_Get: {
        parameters: {
            path: {
                /** @description The ID of the inventory adjustment. */
                inventoryId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetInventoryAdjustmentsLine"];
                };
            };
        };
    };
    /** Get all inventory adjustments which match the specified search criteria. */
    InventoryAdjustments_GetAll: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description The 'from' time. If specified, returns inventory adjustments which were made after this time. */
                from?: string | null;
                /** @description Obsolete, do not use. */
                to?: string | null;
                /** @description The 'to' time. If specified, returns inventory adjustments which were made before this time. */
                toTime?: string | null;
                /** @description Only return inventory adjustments which have not been marked as 'reported'. */
                isReported?: boolean | null;
            };
        };
        /** @description An object containing the inventory adjustment class type data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetInventoryAdjustmentsLine"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetInventoryAdjustmentsLine"])[] | null;
                };
            };
        };
    };
    /** Sets the 'reported' flag on an inventory to true for the specified article. */
    InventoryAdjustments_PatchInventoryAdjustmentArticlesReported: {
        parameters: {
            path: {
                /** @description Inventory ID. */
                inventoryId: number;
                /** @description Article system ID. */
                articleSystemId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchInventoryAdjustmentArticlesReportedResponse"];
                };
            };
        };
    };
    /** Update a parcel on an order. */
    Orders_PutParcelUsingId: {
        parameters: {
            path: {
                /** @description Parcel ID */
                parcelId: number;
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description Information about the parcel. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostParcelUsingIdTypeModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostParcelResponse"];
                };
            };
        };
    };
    /** Deletes a parcel. A parcel can only be deleted if it is empty. */
    Orders_DeleteParcel: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
                /** @description Parcel ID */
                parcelId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostParcelResponse"];
                };
            };
        };
    };
    /** Create or update a parcel on an order. */
    Orders_PutParcel: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description Information about the parcel. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostParcelTypeModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostParcelResponse"];
                };
            };
        };
    };
    /** Create or update a waybill on an order. */
    Orders_PutOrderTracking: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description Information about the order tracking. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostOrderTrackingModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostOrderTrackingResponse"];
                };
            };
        };
    };
    /** Get all order way of delivery types. */
    Orders_GetWayOfDeliveryTypes: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetWayOfDeliveryTypesModel"];
                };
            };
        };
    };
    /** Create or update a way of delivery type. If there is no way of delivery type with the specified code, it will be created. Otherwise, the existing way of delivery type will be updated. */
    Orders_PutWayOfDeliveryType: {
        /** @description An object containing the way of delivery type data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostWayOfDeliveryTypeModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostWayOfDeliveryTypeResponse"];
                };
            };
        };
    };
    /** Update a way of delivery type. The ID will be used to identify the way of delivery type. */
    Orders_PutWayOfDeliveryTypeUsingId: {
        parameters: {
            path: {
                /** @description Way of delivery type ID. */
                wayOfDeliveryTypeId: number;
            };
        };
        /** @description An object containing the way of delivery type data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostWayOfDeliveryTypeModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostWayOfDeliveryTypeResponse"];
                };
            };
        };
    };
    /** Delete a way of delivery type. */
    Orders_DeleteWayOfDeliveryType: {
        parameters: {
            path: {
                /** @description Way of delivery type ID. */
                wayOfDeliveryTypeId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostWayOfDeliveryTypeResponse"];
                };
            };
        };
    };
    /** Get all order classes. */
    Orders_GetOrderClasses: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetOrderClassesModel"];
                };
            };
        };
    };
    /** Get all order statuses. */
    Orders_GetOrderStatuses: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetOrderStatusesModel"];
                };
            };
        };
    };
    /** Get all order types for a particular goods owner. */
    Orders_GetOrderTypes: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetOrderTypesModel"];
                };
            };
        };
    };
    /** Get an order. */
    Orders_Get: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetOrderModel"];
                };
            };
        };
    };
    /** Update an order. Note that you are not allowed to update an order after the warehouse has started working on it. */
    Orders_PutOrderUsingOrderId: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description Order object, containing all order data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostOrderModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostOrderResponse"];
                };
            };
        };
    };
    /** Cancel an order. You can only cancel an order if the warehouse has not started working on it. */
    Orders_Delete: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostOrderResponse"];
                };
            };
        };
    };
    /** Get all orders which match the specified search criteria. */
    Orders_GetAll: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Order number. */
                orderNumber?: string | null;
                /** @description Filter for orders which were marked as 'shipped' after this time. */
                shippedTimeFrom?: string | null;
                /** @description Filter for orders which were marked as 'shipped' before this time. */
                shippedTimeTo?: string | null;
                /** @description Filter for orders whose status is greater than or equal to this. */
                orderStatusFrom?: number | null;
                /** @description Filter for orders whose status is lower than or equal to this. */
                orderStatusTo?: number | null;
                /** @description Only return orders where there are order lines with ReportedNumberOfItems < PickedNumberOfItems. */
                onlyOrdersWithOrderLinesToReport?: boolean | null;
                /** @description Only return orders whose order ID is greater than or equal this. */
                orderIdFrom?: number | null;
                /** @description The maximum number of orders to return. */
                maxOrdersToGet?: number | null;
                /** @description Only return orders whose status has changed after this time. */
                orderStatusChangedTimeFrom?: string | null;
                /** @description Only return orders which have been returned on since this time. */
                lastReturnedFrom?: string | null;
                orderNumbers?: (string)[] | null;
                /** @description Only return orders which have been created after this time. */
                orderCreatedTimeFrom?: string | null;
                /** @description Only return orders where there are order lines where ReportedReturnedNumberOfItems is less than the actual number of returned items. */
                onlyOrdersWithOrderLinesToReportReturned?: boolean | null;
                /** @description Only return orders where the transport documents have been printed. */
                onlyIfTransportPrinted?: boolean | null;
                /** @description Only return orders belonging to this shipment. */
                shipmentId?: number | null;
                /** @description Either 'All' or 'NotPickable'. If it is 'NotPickable', only return orders which are not pickable. */
                pickable?: string | null;
                /** @description Filter for orders which contains a pallet/package with the specified parcel number. */
                parcelNumber?: string | null;
                /** @description Only return orders which have been created before this time. */
                orderCreatedTimeTo?: string | null;
                /** @description Filter for orders which contains at least one of these article numbers. */
                articleNumbers?: (string)[] | null;
                /** @description Filter for orders which contains an item with the specified serial number. */
                serial?: string | null;
                marketPlace?: string | null;
                /** @description Only return orders which have been updated after this time. Note that this value must be at most 2 days old. */
                orderUpdatedTimeFrom?: string | null;
                /** @description Only return orders which are back orders for the order with this order ID. */
                backOrderForOrderId?: number | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetOrderModel"])[];
                };
            };
        };
    };
    /** Create or update an order. If there is no order with the specified order number, it will be created. Otherwise, the existing order will be updated. Note that you are not allowed to update an order after the warehouse has started working on it. */
    Orders_PutOrder: {
        /** @description Order object, containing all order data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostOrderModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostOrderResponse"];
                };
            };
            201: {
                content: {
                    "application/json": components["schemas"]["PostOrderResponse"];
                };
            };
        };
    };
    /** Cancel an order using the order number. You can only cancel an order if the warehouse has not started working on it. */
    Orders_DeleteByOrderNumber: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Order number. */
                orderNumber: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostOrderResponse"];
                };
            };
        };
    };
    /** Get all waybill rows for an order. */
    Orders_GetWayBillRows: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetWayBillRowModel"])[] | null;
                };
            };
        };
    };
    /** Create a waybill row. */
    Orders_PostWayBillRow: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description Information about the waybill row. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostWayBillRowModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostWaybillRowResponse"];
                };
            };
        };
    };
    /** Deletes a waybill row. */
    Orders_DeleteWaybillRow: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
                /** @description Waybill row ID */
                wayBillRowId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostParcelResponse"];
                };
            };
        };
    };
    /** Update waybill row. */
    Orders_PatchWayBillRow: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
                /** @description Waybill row ID. */
                wayBillRowId: number;
            };
        };
        /** @description Information about the waybill row. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostWayBillRowModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostWaybillRowResponse"];
                };
            };
        };
    };
    /** Get all invoice charges for an order. This function requires an additional permission for the API user, see Administration->Integration->API for goods owners. */
    Orders_GetInvoiceCharges: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetOrderInvoiceChargeModel"])[] | null;
                };
            };
        };
    };
    /** Get all files which are attached to a specific order. */
    Orders_GetFiles: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetFileModel"])[] | null;
                };
            };
        };
    };
    /** Create or update a file which is attached to an order. The filename will be used to check if the file already exists. */
    Orders_PutFileUsingFilename: {
        parameters: {
            query: {
                /** @description File name. */
                fileName: string | null;
            };
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileNoFilenameModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Create a new file and attach it to an order. */
    Orders_Post: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Update a file which is attached to an order. */
    Orders_PutFile: {
        parameters: {
            path: {
                /** @description Order ID. */
                orderId: number;
                /** @description File ID. */
                fileId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Update the order number of an existing order. Note that the system will not verify that the order number is unique. */
    Orders_PatchOrderNumber: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new order number. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderNumberModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Set order classes on an existing order. If the order has any other classes which you don't send, they will be deleted from the order. */
    Orders_PatchSetOrderClasses: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the order classes. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderClassesModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Add order classes to an existing order. */
    Orders_PatchAddOrderClasses: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the order classes. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderClassesModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the transporter of an existing order. */
    Orders_PatchOrderTransporterCode: {
        parameters: {
            path: {
                orderId: number;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderTransporterModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the return waybill of an existing order. */
    Orders_PatchReturnWaybill: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new return waybill. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderReturnWaybill"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the service point code of an existing order. */
    Orders_PatchServicePointCode: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new service point code. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchServicePointCode"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the status of an order. Note that if the warehouse has allocated goods to the order, then it's possible that this call will fail. */
    Orders_PatchOrderStatus: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new order status. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderStatus"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the waybill of an existing order. */
    Orders_PatchWaybill: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new waybill. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderWaybill"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the delivery date of an existing order. */
    Orders_PatchDeliveryDate: {
        parameters: {
            path: {
                /** @description OrderId. */
                orderId: number;
            };
        };
        /** @description Object containing the new delivery date. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchOrderDeliveryDate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Sets the reported number of items on each order line to the picked number of items. */
    Orders_PatchSetReportedNumberOfItemsToPickedNumberOfItems: {
        parameters: {
            path: {
                /** @description Ongoing WMS internal ID of the order */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the reported number of items on a particular order line. */
    Orders_PatchReportedNumberOfItems: {
        parameters: {
            path: {
                /** @description Ongoing WMS internal ID of the order */
                orderId: number;
                /** @description Ongoing WMS internal ID of the order line */
                orderLineId: number;
            };
        };
        /** @description Object containing the reported number of items */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderReportedNumberOfItemsModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Sets the reported returned number of items on each order line to the returned number of items. */
    Orders_PatchSetReportedReturnedNumberOfItemsToReturnedNumberOfItems: {
        parameters: {
            path: {
                /** @description Ongoing WMS internal ID of the order */
                orderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchOrderResponse"];
                };
            };
        };
    };
    /** Update the reported returned number of items on a particular order line. */
    Orders_PatchReportedReturnedNumberOfItems: {
        parameters: {
            path: {
                /** @description Ongoing WMS internal ID of the order */
                orderId: number;
                /** @description Ongoing WMS internal ID of the order line */
                orderLineId: number;
            };
        };
        /** @description Object containing the reported returned number of items */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchOrderReportedReturnedNumberOfItemsModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    /** Get all return causes. */
    ReturnOrders_GetReturnCauses: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetReturnCausesModel"];
                };
            };
        };
    };
    /** Create or update a return cause type. If there is no return cause with the specified code, it will be created. Otherwise, the existing return cause will be updated. */
    ReturnOrders_PutReturnCause: {
        /** @description An object containing the return cause data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostReturnCauseModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostReturnCauseResponse"];
                };
            };
        };
    };
    /** Update a return cause. The ID will be used to identify the return cause. */
    ReturnOrders_PutReturnCauseUsingId: {
        parameters: {
            path: {
                returnCauseId: number;
            };
        };
        /** @description An object containing the return cause type data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostReturnCauseModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostReturnCauseResponse"];
                };
            };
        };
    };
    /** Get a return order using the return order ID. */
    ReturnOrders_GetByReturnOrderId: {
        parameters: {
            path: {
                /** @description Return order ID. */
                returnOrderId: number;
            };
        };
        responses: {
            /** @description A return order. */
            200: {
                content: {
                    "application/json": components["schemas"]["GetReturnOrderModel"];
                };
            };
        };
    };
    /** Get a list of return orders which match the specified search criteria. */
    ReturnOrders_Get: {
        parameters: {
            query: {
                /** @description Goods owner ID */
                goodsOwnerId: number;
                /** @description A list of return order numbers */
                returnOrderNumbers?: (string)[] | null;
                /** @description A list of customer order numbers */
                customerOrderNumbers?: (string)[] | null;
                /** @description Only return orders where a return has been made after this date. */
                goodsReturnedFromDate?: string | null;
                /** @description Only return orders whose return order status is greater than or equal to this. */
                returnOrderStatusFrom?: number | null;
                /** @description Only return orders whose return order status is less than or equal to this. */
                returnOrderStatusTo?: number | null;
            };
        };
        responses: {
            /** @description A list of return orders. */
            200: {
                content: {
                    "application/json": (components["schemas"]["GetReturnOrderModel"])[];
                };
            };
        };
    };
    /** Create or update a return order. */
    ReturnOrders_PutReturnOrder: {
        /** @description The return order. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostReturnOrderModel"];
            };
        };
        responses: {
            /** @description A message indicating success or failure. */
            200: {
                content: {
                    "application/json": components["schemas"]["PostReturnOrderResponse"];
                };
            };
        };
    };
    /** Get all return order statuses. */
    ReturnOrders_GetOrderStatuses: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetReturnOrderStatusesModel"];
                };
            };
        };
    };
    /** Get all purchase order statuses. */
    PurchaseOrders_GetPurchaseOrderStatuses: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetPurchaseOrderStatusesModel"];
                };
            };
        };
    };
    /** Get all purchase order types for a particular goods owner. */
    PurchaseOrders_GetPurchaseOrderTypes: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetPurchaseOrderTypesModel"];
                };
            };
        };
    };
    /** Get a purchase order. */
    PurchaseOrders_Get: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["GetPurchaseOrderModel"];
                };
            };
        };
    };
    /** Update a purchase order. */
    PurchaseOrders_Put: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        /** @description Purchase order object, containing all purchase order data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostPurchaseOrderModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Cancel a purchase order. */
    PurchaseOrders_Delete: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Get all purchase orders which match the specified search criteria. */
    PurchaseOrders_GetAll: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Purchase order number. */
                purchaseOrderNumber?: string | null;
                /** @description Filter for purchase orders where goods have been received after this time. */
                lastReceiveTimeFrom?: string | null;
                /** @description Filter for purchase orders where goods have been received before this time. */
                lastReceiveTimeTo?: string | null;
                /** @description Filter for purchase orders whose order status is greater than or equal to this. */
                purchaseOrderStatusFrom?: number | null;
                /** @description Filter for purchase orders whose order status is less than or equal to this. */
                purchaseOrderStatusTo?: number | null;
                /** @description Filter for purchase orders where at least one line has ReportedNumberOfItems != ReceivedNumberOfItems. */
                onlyPurchaseOrdersWithOrderLinesToReport?: boolean | null;
                /** @description Only return purchase orders whose purcahse order ID is greater than or equal to this. */
                purchaseOrderIdFrom?: number | null;
                /** @description The maximum number of purchase orders to return. */
                maxPurchaseOrdersToGet?: number | null;
                /** @description Only return purchase orders whose status has changed after this time. */
                purchaseOrderStatusChangedTimeFrom?: string | null;
                purchaseOrderNumbers?: (string)[] | null;
                /** @description Filter for purchase orders which contains at least one of these article numbers. */
                articleNumbers?: (string)[] | null;
                /** @description Filter for purchase orders where the expected indate is after this date. */
                inDateFrom?: string | null;
                /** @description Filter for purchase orders where the expected indate is before this date. */
                inDateTo?: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetPurchaseOrderModel"])[] | null;
                };
            };
        };
    };
    /** Create or update a purchase order. If no purchase order with the specified purchase order number exists, a new purchase order will be created. Otherwise the existing purchase order will be updated. */
    PurchaseOrders_Put2: {
        /** @description Purchase order object, containing all purchase order data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostPurchaseOrderModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Cancel a purchase order using the purchase order number. */
    PurchaseOrders_DeleteByOrderNumber: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
                /** @description Purchase order number. */
                purchaseOrderNumber: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Sets the reported number of items on each purchase order line to the received number of items. */
    PurchaseOrders_PatchSetReportedNumberOfItemsToReceivedNumberOfItems: {
        parameters: {
            path: {
                purchaseOrderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    /** Update the reported number of items on a particular purchase order line. */
    PurchaseOrders_PatchReportedNumberOfItems: {
        parameters: {
            path: {
                purchaseOrderId: number;
                /** @description Ongoing WMS internal ID of the purchase order line */
                purchaseOrderLineId: number;
            };
        };
        /** @description Object containing the reported number of items */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPurchaseOrderReportedNumberOfItemsModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    /** Update FreeBool1 on purchase order. */
    PurchaseOrders_PatchFreeBool1: {
        parameters: {
            path: {
                /** @description Purchase orders ID */
                purchaseOrderId: number;
            };
        };
        /** @description Object containing FreeBool1 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPurchaseOrderFreeBool1"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Update the indate on purchase order. */
    PurchaseOrders_PatchInDate: {
        parameters: {
            path: {
                /** @description Purchase orders ID */
                purchaseOrderId: number;
            };
        };
        /** @description Object containing the indate */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPurchaseOrderInDate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Update the advisedDate on purchase order. */
    PurchaseOrders_PatchAdvisedDate: {
        parameters: {
            path: {
                /** @description Purchase orders ID */
                purchaseOrderId: number;
            };
        };
        /** @description Object containing the advised date */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPurchaseOrderAdvisedDate"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Update the status of a purchase order. Note that if the warehouse has started to recieve goods from the purchase order, then it's possible that this call will fail. */
    PurchaseOrders_PatchStatus: {
        parameters: {
            path: {
                /** @description PurchaseOrderId. */
                purchaseOrderId: number;
            };
        };
        /** @description Object containing the new purchase order status. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PatchPurchaseOrderStatus"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PatchPurchaseOrderResponse"];
                };
            };
        };
    };
    /** Add article items to a purchase order. */
    PurchaseOrders_PutArticleItems: {
        parameters: {
            path: {
                /** @description The purchase order ID. */
                purchaseOrderId: number;
            };
        };
        /** @description The article items which you want to add. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostPurchaseOrderArticleItemsModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PurchaseOrderArticleItemResponse"];
                };
            };
        };
    };
    /** Get all files which are attached to a specific purchase order. */
    PurchaseOrders_GetFiles: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetFileModel"])[] | null;
                };
            };
        };
    };
    /** Create or update a file which is attached to a purchase order. The filename will be used to check if the file already exists. */
    PurchaseOrders_PutFileUsingFilename: {
        parameters: {
            query: {
                /** @description File name. */
                fileName: string | null;
            };
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileNoFilenameModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Create a new file and attach it to a purchase order. */
    PurchaseOrders_PostPurchaseOrderFile: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Update a file which is attached to a purchase order. */
    PurchaseOrders_PutFile: {
        parameters: {
            path: {
                /** @description Purchase order ID. */
                purchaseOrderId: number;
                /** @description File ID. */
                fileId: number;
            };
        };
        /** @description File object, containing all file data. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostFileModel"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["PostFileResponse"];
                };
            };
        };
    };
    /** Get all transporter contracts for a specific goods owner. The response will include all transporter codes which are available for the goods owner. */
    TransporterContracts_Get: {
        parameters: {
            query: {
                /** @description Goods owner ID. */
                goodsOwnerId: number;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": (components["schemas"]["GetTransporterContract"])[] | null;
                };
            };
        };
    };
    /** Get all parcel types which are valid for a particular goods owner. */
    ParcelTypes_GetParcelTypes: {
        parameters: {
            query: {
                goodsOwnerId: number;
            };
        };
        responses: {
            /** @description A list of parcel types */
            200: {
                content: {
                    "application/json": (components["schemas"]["ParcelTypeModel"])[] | null;
                };
            };
        };
    };
    /** Get all warehouses which have been set up in the system. */
    Warehouses_Get: {
        responses: {
            /** @description A list of warehouses */
            200: {
                content: {
                    "application/json": (components["schemas"]["WarehouseModel"])[] | null;
                };
            };
        };
    };
    /** Get all zones (including aisles and locations) for a particular warehouse. */
    Warehouses_GetZonesForWarehouse: {
        parameters: {
            path: {
                /** @description The warehouse ID */
                warehouseId: number;
            };
        };
        responses: {
            /** @description A list of zones */
            200: {
                content: {
                    "application/json": (components["schemas"]["ZoneModel"])[] | null;
                };
            };
        };
    };
    /** Get all location types. */
    Warehouses_GetLocationTypes: {
        responses: {
            /** @description A list of location types */
            200: {
                content: {
                    "application/json": (components["schemas"]["LocationTypeModel"])[] | null;
                };
            };
        };
    };
}
